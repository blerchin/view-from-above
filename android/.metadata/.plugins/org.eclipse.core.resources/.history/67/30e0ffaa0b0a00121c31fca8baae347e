package com.example.time_lapse_camera;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.Date;

import android.content.Context;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.hardware.Camera;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.SurfaceView;

/** A basic Camera preview class */
public class CameraPreview extends SurfaceView implements SurfaceHolder.Callback {
	private static int MEDIA_TYPE_IMAGE = 1;
	public static final int MEDIA_TYPE_VIDEO = 2;
	
	private static final String TAG = "CameraPreview";
	
    private SurfaceHolder mHolder;
    private Camera mCamera;
    
    private int picturesBatched;
    private URI[] picturesToBatch;
    
    public int picturesTaken;
    public boolean crashFlag = false; 

    public CameraPreview(Context context, Camera camera) {
        super(context);
        
        
        
        mCamera = camera;
       
        
    }
    public void init(){
    	Log.d(TAG, "init() called");
    	 // Install a SurfaceHolder.Callback so we get notified when the
        // underlying surface is created and destroyed.
    	mHolder = getHolder();
    	mHolder.addCallback(this);
    	picturesTaken = 0;
    	picturesToBatch = new URI[10];
    	picturesBatched = 0;
    	
    
    }
    
    /** Create a File for saving an image or video */
    private static File getOutputMediaFile(int type) throws IOException {
        // To be safe, you should check that the SDCard is mounted
        // using Environment.getExternalStorageState() before doing this.

        File mediaStorageDir = new File(Environment.getExternalStoragePublicDirectory(
                  Environment.DIRECTORY_PICTURES), "TimeLapseCamera");
        // This location works best if you want the created images to be shared
        // between applications and persist after your app has been uninstalled.

        // Create the storage directory if it does not exist
        if (! mediaStorageDir.exists()){
            if (! mediaStorageDir.mkdirs()){
                Log.d(TAG, "failed to create directory");
                throw (IOException) new IOException().initCause(new Throwable( "cannot access storage device."));
            }
        }

        // Create a media file name
        String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
        File mediaFile;
        if (type == MEDIA_TYPE_IMAGE){
            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
            "IMG_"+ timeStamp + ".jpg");
        } else if(type == MEDIA_TYPE_VIDEO) {
            mediaFile = new File(mediaStorageDir.getPath() + File.separator +
            "VID_"+ timeStamp + ".mp4");
        } else {
            return null;
        }

        return mediaFile;
    }
    /** Create a file Uri for saving an image or video */
    private static URI getFileURI(File outputFile ){
          return outputFile.toURI();
    }

    public void surfaceCreated(SurfaceHolder holder) {
        Log.d(TAG,"surfaceCreated() called");
    	// The Surface has been created, now tell the camera where to draw the preview.
        try{
        	mCamera.setPreviewDisplay(mHolder);
        	mCamera.startPreview();
        } catch (IOException e){
        	Log.d(TAG, "camera preview was not attached to mHolder");
        }
        setPreviewCallback();
       
    }

    public void surfaceDestroyed(SurfaceHolder holder) {
        
        
    }

    public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
        // If your preview can change or rotate, take care of those events here.
        // Make sure to stop the preview before resizing or reformatting it.
    	Log.d(TAG,"surfaceChanged called");
        if (mHolder.getSurface() == null){
          // preview surface does not exist
          return;
        }
        
        // stop preview before making changes
        try {
            //mCamera.stopPreview();
        } catch (Exception e){
        	
          // ignore: tried to stop a non-existent preview
        }

        // set preview size and make any resize, rotate or
        // reformatting changes here

        // start preview with new settings
        
    }
    
   public void setPreviewCallback(){
	   try {
           
           //We have to set the callback where the Preview is started 
           
           mCamera.setPreviewCallback( 
           		new Camera.PreviewCallback() {
           			
   					@Override
   					public void onPreviewFrame(byte[] data, Camera camera)  {
   						int fileFailCounter = 0;
   						Log.d(TAG,"onPreviewFrame called; data length: "+data.length);
   						
   						
   						int previewFormat = camera.getParameters().getPreviewFormat();
   		    	    	if (previewFormat == android.graphics.ImageFormat.NV21) {
   		    	    		Camera.Size previewSize = camera.getParameters().getPreviewSize();
   		    	    		Rect previewRect = new Rect(0, 0, previewSize.width, previewSize.height);
   		    	    		YuvImage yuvImage = new YuvImage(data, previewFormat, previewSize.width, previewSize.height, null);
   		    	    		Log.d(TAG,"yuvImage saved");
   		    	    		File saveFile = null;
   		    	    		try{
	    		    	    		saveFile = getOutputMediaFile( MEDIA_TYPE_IMAGE );
	    		    	    		
	    		    	    		fileFailCounter=0;
	    		    	    		
   		    	    		} catch(IOException e) {
   		    	    			Log.d(TAG,"Couldn't create media file");
   		    	    			
   		    	    		} finally {
	    		    	    		OutputStream outToFile = null;
	    		    	    		AsyncTask batchUpload = null;
	    		    	    		try {
	    		    	    			outToFile = new BufferedOutputStream( new FileOutputStream( saveFile), 8192 );
	    		    	    			yuvImage.compressToJpeg(previewRect, 60, outToFile);
	    		    	    		
	    		    	    		} catch(FileNotFoundException e) {
	    		    	    			Log.d(TAG,"File wasn't created properly: "+e.getMessage());
	    		    	    		}finally {
	    		    	    			if(outToFile != null) {
	    		    	    				try{
	    		    	    					outToFile.close();
	    		    	    					Log.d(TAG,"Took a picture!");
	    		    	    					// In anticipation of the upload failing occasionally, buffer last 10 images 
	    		    	    					// 10 is a guess at a good balance between lag & feed continuity.
	    		    	    					// Basically we are buffering picturesToBatch.length most recent images 
	    		    	    					// to send to BatchToFTP. If AsyncTask fails we will keep writing to end
	    		    	    					if( picturesBatched < picturesToBatch.length) {
	    		    	    						picturesToBatch[picturesBatched] = getFileURI(saveFile);
	    		    	    						picturesBatched++;
	    		    	    					}else if ( picturesBatched == picturesToBatch.length ) {
	    		    	    						
	    		    	    						batchUpload = new BatchToFTP().execute(picturesToBatch.clone() );
	    		    	    						//push everything back one, then add to end
	    		    	    						for( int i = 0; i < picturesToBatch.length; i++ ) {
	    		    	    							picturesToBatch[i] = picturesToBatch[i+1];
	    		    	    						}
	    		    	    						picturesToBatch[picturesBatched] = getFileURI(saveFile);
	    		    	    						picturesBatched++;
	    		    	    					}
	    		    	    				try{
	    		    	    					//if the batch process was not just made AND the task is finished
	    		    	    					//check to see if the process was successful and if so 
	    		    	    					//start storing pictures at 0 again
	    		    	    					/**this behavior needs improvement**/
	    		    	    					
	    		    	    					if (picturesBatched == picturesToBatch.length +1 
	    		    	    						&& batchUpload.getStatus() == AsyncTask.Status.FINISHED 
	    		    	    						&& batchUpload.get() == Long.valueOf(1) ) {
	    		    	    					picturesBatched = 0;
	    		    	    					}
    		    	    					}catch(Exception e) {
    		    	    						Log.d(TAG,"something went wrong while checking on FTP upload: "+e.getMessage());
    		    	    					}
	    		    	    					
	    		    	    					picturesTaken++;
	    		    	    				} catch (IOException e) {
	    		    	    					Log.d(TAG,"File did not close");
	    		    	    				}
	    		    	    				
	    		    	    		
	    				    	    	} else {
	    				    	    		fileFailCounter++;
	        		    	    			if(fileFailCounter > 21) {
	        		    	    				crashFlag = true;
	        		    	    			}
	    				    	    		Log.d(TAG, "Preview Image is in wrong format");
	    				    	    	}
	    		    	    		}
   		    	    		}
   		    	    	}
   					}
   				});            	 

       } catch (Exception e){
           Log.d(TAG, "Error starting camera preview: " + e.getMessage());
   }
  }
}